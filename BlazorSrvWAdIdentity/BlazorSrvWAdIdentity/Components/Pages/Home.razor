
@inject Microsoft.AspNetCore.Components.Authorization.AuthenticationStateProvider AuthStateProvider

@page "/"
@using BlazorSrvWAdIdentity.Auth
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@using System.Security.Principal

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

<br />

<h3>Usuário Logado:</h3>

@if (authState is not null)
{

    <AuthorizeView>
        <p>Usuário autenticado: @authState.User.Identity.Name</p>
        <p>Está autenticado? @authState.User.Identity.IsAuthenticated</p>
        <p>Está no 	SPINENGENHARIA\GRP-SPINTRACK-ADMIN? @authState.User.IsInRole("S-1-5-21-3948068456-3201447862-1739703090-4114")</p>
        <p>
            Claims: <br />
            <table class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th>Type</th>
                        <th>Value</th>
                        <th>Identifier</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var claim in VerificarUsuario().Result)
                    {
                        <tr>
                            <td>@(claim.Type)</td>
                            <td>@(claim.Value)</td>
                            <td>@(GetClaimSid(claim))</td>
                        </tr>
                    }
                </tbody>
            </table>
        </p>
    </AuthorizeView>


}
else
{
    <p>Nenhum usuário autenticado</p>
}

@code {

    private AuthenticationState? authState;

    private string GetClaimSid(Claim claim)
    {
        if (claim.Type.Contains(@"claims/name", StringComparison.CurrentCultureIgnoreCase))
            return claim.Value;

        var sid = new SecurityIdentifier(claim.Value);
        var ntAccount = (NTAccount)sid.Translate(typeof(NTAccount));
        string SidValue = ntAccount.Value;
        return SidValue;
    }

    protected override async Task OnInitializedAsync()
    {
        authState = await AuthStateProvider.GetAuthenticationStateAsync();

    }


    private async Task<IEnumerable<Claim>> VerificarUsuario()
    {
        var user = authState.User;

        Console.WriteLine($"Usuário autenticado: {user.Identity?.Name}");
        Console.WriteLine($"Autenticado: {user.Identity?.IsAuthenticated}");

        return user.Claims;
        
    }

    
}