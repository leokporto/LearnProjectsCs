
@inject Microsoft.AspNetCore.Components.Authorization.AuthenticationStateProvider AuthStateProvider

@page "/"
@using BlazorSrvWAdIdentity.Auth
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@using System.Security.Principal

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

<br />

<h3>Usuário Logado:</h3>

@if (authState is not null)
{

    <AuthorizeView>
        <p>Usuário autenticado: @authState.User.Identity.Name</p>
        <p>Está autenticado? @authState.User.Identity.IsAuthenticated</p>
        <p>Está no S-1-1-0? @authState.User.IsInRole("S-1-1-0")</p>
        <p>
            Claims: <br />
            <table class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th>Type</th>
                        <th>Value</th>
                        <th>AD Name</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var claim in VerificarUsuario().Result)
                    {

                        <tr>
                            <td>@(claim.Type)</td>
                            <td>@(claim.Value)</td>
                            <td>@GetAdGroupName(claim)</td>
                        </tr>
                    }
                </tbody>
            </table>
        </p>
    </AuthorizeView>


}
else
{
    <p>Nenhum usuário autenticado</p>
}

@code {

    private AuthenticationState? authState;

    private string GetAdGroupName(Claim claim)
    {
        if (claim == null)
            return "";

        if (claim.Type.Contains("name"))
            return claim.Value;

        var sid = new SecurityIdentifier(claim.Value);
        var ntAccount = (NTAccount)sid.Translate(typeof(NTAccount));
        string SidValue = ntAccount.Value;
        return SidValue;
    }

    protected override async Task OnInitializedAsync()
    {
        authState = await AuthStateProvider.GetAuthenticationStateAsync();

        // if (authState.User.Identity != null && authState.User.Identity.IsAuthenticated)
        // {
        //     var user = await UserManager.GetUserAsync(authState.User);
        //     // await SignInManager.SignOutAsync();
        //     // await SignInManager.SignInAsync(user, isPersistent: false);

        //     //await AdUserManager.EnsureUserExists(authState.User);

        //     //authState.User.IsInRole("ADMINISTRADOR");
        // }
    }

    // private async Task CheckRoles()
    // {
    //     var authState = await AuthStateProvider.GetAuthenticationStateAsync();
    //     var user = authState.User;

    //     if (user.Identity?.IsAuthenticated == true)
    //     {
    //         var appUser = await UserManager.GetUserAsync(user);
    //         var roles = await UserManager.GetRolesAsync(appUser);

    //         Console.WriteLine($"Usuário: {appUser?.UserName}");
    //         Console.WriteLine($"Roles: {string.Join(", ", roles)}");
    //     }
    //     else
    //     {
    //         Console.WriteLine("Usuário não autenticado.");
    //     }
    // }

    private async Task<IEnumerable<Claim>> VerificarUsuario()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        Console.WriteLine($"Usuário autenticado: {user.Identity?.Name}");
        Console.WriteLine($"Autenticado: {user.Identity?.IsAuthenticated}");

        return user.Claims;
        // foreach (var claim in user.Claims)
        // {
        //     Console.WriteLine($"Claim: {claim.Type} - {claim.Value}");
        // }
    }

    // private async Task VerificarUsuario2()
    // {
    //     var userName = authState.User.Identity?.Name;
    //     var appUser = await UserManager.FindByNameAsync(userName);

    //     if (appUser == null)
    //     {
    //         Console.WriteLine("Usuário não encontrado no banco!");
    //     }
    //     else
    //     {
    //         var roles = await UserManager.GetRolesAsync(appUser);
    //         Console.WriteLine($"Usuário: {appUser.UserName}");
    //         Console.WriteLine($"Roles no banco: {string.Join(", ", roles)}");
    //     }


    // }
}